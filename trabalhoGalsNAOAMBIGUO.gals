#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = String
Parser = SLR
#RegularDefinitions

#Tokens
:[\n\s\t\r]*
COMENTARIO: (/)(/).*
COMENTARIO_BLOCO: (/)\* ([^\*] | \*+ [^/] )* \* + (/)

INTEIRO: [0-9]*
DECIMAL: [0-9],[0-9]
CARACTERE: '[^']'
TEXTO: \"([^\"]*)\"

ENTRADA: "input::"
SAIDA: "out::"
RETORNO: "return"

ENTAO: "else if"
SE: "if"
SENAO: "else"
ENQUANTO: "while"
FACA: "do"
RETORNO: "return"
PARA: "for"
CONSTANTE: "const"
VARIAVEL: "var"
FUNCAO: "function"

PONTO: "."
PONTO_VIRGULA: ";"
DOIS_PONTOS: ":"
COLCHETE_ABRE: "["
COLCHETE_FECHA: "]"
PARENTESES_ABRE: "("
PARENTESES_FECHA: ")"
CHAVES_ABRE: "{"
CHAVES_FECHA: "}"
VIRGULA: ","
RECEBE: "="

EXPOENTE: "**"
SOMA: "+"
SUBTRACAO: "-"
MULTIPLICACAO: "*"
DIVISAO: "/"
RESTO: "%"

IGUAL: "=="
MAIOR: ">"
MENOR: "<"
MAIOR_IGUAL: ">="
MENOR_IGUAL: "<="
DIFERENTE: "!="

E: "&&"
OU: "||"
NAO: "!"

DESLOCAMENTO_DIREITA: ">>"
DESLOCAMENTO_ESQUERDA: "<<"
E_BAB: "&"
OU_BAB: "|"
OU_EXCLUSIVO: "^"
COMPLEMENTO: "~"


ID: [a-zA-Z0-9_\-]*

CHAR = ID: "char"
INT = ID: "int"
FLOAT = ID: "float"
STRING = ID: "string"
VOID = ID: "void"
BOOLEAN = ID: "bool"



#NonTerminals
<lista_comandos>
<auxcomando>
<comando>
<funcao>
<funcao_tipo>
<param>
<paramaux>
<virgula>
<funcao_invoca>
<invoca_param>
<return>
<entrada>
<saida>
<tipagem_saida>
<proxsaida>
<doispontos>
<decl_var>
<lista_variaveis>
<lista_variaveis_aux>
<variavel_init>
<init_opcional>
<decl_var_simples>
<variavelsimplesaux>
<ultimoaux>
<tipo>
<indexdeclara>
<tipovar>
//<lista_ids>
<vetor>
<colchetepvetor>
<id_complemento>
<listaaux>
<oqreceber>
<virgulalista>
<id>
<index>
<if>
<auxif>
<else_if_seq>
<else_if>
<else>
<while>
<auxwhile>
<do_while>
<for>
<bloco>
<lista_instrucoes_opcional>
<retorno_opcional>
<instrucao_simples>
<atribuicao>
<ver_fim>
<exp1>
<exp2>
<exp3>
<exp4>
<exp5>
<exp6>
<exp7>
<exp8>
<exp9>
<exp10>
<exp11>
<op_rel>
<op_adc>
<op_neg>
<op_bitwise>
<op_arit_baixa>
<op_arit_alta>
<fim_linha>
#Grammar
// Lista de Comandos
<lista_comandos> ::= <comando> <auxcomando>;

<auxcomando> ::= <lista_comandos> | î;

// Comando
<comando> ::= <funcao> | <entrada> | <saida> | <funcao_invoca> | <if> | <for> | <do_while> | <while> | <decl_var> | <atribuicao>;

// FUNÇÃO
<funcao> ::= FUNCAO <funcao_tipo> <id> PARENTESES_ABRE <param> PARENTESES_FECHA <bloco>
           | FUNCAO <funcao_tipo> <id> PARENTESES_ABRE PARENTESES_FECHA <bloco>;
<funcao_tipo> ::= CHAR | INT | FLOAT | STRING | VOID | BOOLEAN;
<param> ::= <id> <paramaux>
          | <decl_var_simples>;
          
<paramaux> ::= <virgula> <param> | î;

<virgula> ::= VIRGULA;

// INVOCACAO DE FUNÇÃO
<funcao_invoca> ::= <id> PARENTESES_ABRE <invoca_param> PARENTESES_FECHA <fim_linha>
                  | <id> PARENTESES_ABRE PARENTESES_FECHA <fim_linha>;
<invoca_param> ::= <exp11>
                 | <exp11> <virgula> <invoca_param>;

// RETORNO
<return> ::= RETORNO <exp1> PONTO_VIRGULA;

// ENTRADA / SAÍDA
<entrada> ::= ENTRADA <id> <fim_linha>; //input:: a;

<saida> ::= SAIDA <exp1> <tipagem_saida>; //cout << "texto"

<tipagem_saida> ::= <doispontos> <proxsaida> | <fim_linha>;  // << variável;
             
<proxsaida> ::= <exp1> <tipagem_saida>;

<doispontos> ::= DOIS_PONTOS DOIS_PONTOS;

///////////////////////////////////////////////////////
// DECLARAÇÃO DE VARIÁVEL
<decl_var> ::= <tipo> <lista_variaveis> <fim_linha>; // Suporta int a, b = 2, c;

<lista_variaveis> ::= <variavel_init> <lista_variaveis_aux>;

<lista_variaveis_aux> ::= VIRGULA <variavel_init> <lista_variaveis_aux> | î;

<variavel_init> ::= <id> <init_opcional>;

<init_opcional> ::= RECEBE <exp1> | î;


//////////////////////////

<decl_var_simples> ::= <tipo> <id> <variavelsimplesaux>; //feitooooooooooooo

<variavelsimplesaux> ::= RECEBE <exp1> <ultimoaux> | <ultimoaux>;

<ultimoaux> ::= <virgula> <decl_var_simples> | î;


<tipo> ::= <tipovar> <indexdeclara> | <tipovar>; //ve o tipo da declaracao, se tem vetor ou nao

<indexdeclara> ::= COLCHETE_ABRE COLCHETE_FECHA;

<tipovar> ::= INT
            | FLOAT
            | CHAR
            | STRING;

// LISTA DE IDs
//<lista_ids> ::= <id> <id_complemento>; //xx



<vetor> ::= <colchetepvetor> | î;

<colchetepvetor> ::= COLCHETE_ABRE COLCHETE_FECHA | î;

<id_complemento> ::= RECEBE <listaaux>
                  | î; //fala oq ele vai receber

<listaaux> ::= <oqreceber> <virgulalista>; //numero ou texto ,  

<oqreceber> ::= INTEIRO
              | DECIMAL
              | CARACTERE
              | TEXTO
              | ID;

          
<virgulalista> ::= <virgula> <decl_var> //virgula pra varias variaveis
                 | î;


<id> ::= ID;
<index> ::= COLCHETE_ABRE INTEIRO COLCHETE_FECHA;
////////////////////////////////////

// IF, ELSE IF, ELSE

<if> ::= SE PARENTESES_ABRE <exp1> PARENTESES_FECHA <bloco> <auxif>;

<auxif> ::= <else_if_seq> <else> | <else_if_seq> | <else> | î;

<else_if_seq> ::= <else_if>
                 | <else_if> <else_if_seq>;

<else_if> ::= ENTAO PARENTESES_ABRE <exp1> PARENTESES_FECHA <bloco> <else>;
<else> ::= SENAO <bloco>;

// WHILE / DO-WHILE
<while> ::= ENQUANTO PARENTESES_ABRE <auxwhile> PARENTESES_FECHA <bloco>;
          
<auxwhile> ::= <exp1> | <decl_var_simples>;

<do_while> ::= FACA <bloco> ENQUANTO PARENTESES_ABRE <auxwhile> PARENTESES_FECHA <fim_linha>;

// FOR
<for> ::= PARA PARENTESES_ABRE <auxwhile> PONTO_VIRGULA <exp1> PONTO_VIRGULA <exp1> PARENTESES_FECHA <bloco>;

// BLOCO DE COMANDOS
<bloco> ::= CHAVES_ABRE <lista_instrucoes_opcional> <retorno_opcional> CHAVES_FECHA;

<lista_instrucoes_opcional> ::= <comando> <lista_instrucoes_opcional> | î;

<retorno_opcional> ::= <return> | î;

<instrucao_simples> ::= <atribuicao> | <ver_fim>; //<comando> | <ver_fim> | <atribuicao>;

<atribuicao> ::= <id> RECEBE <exp1> <fim_linha>;

<ver_fim> ::= <exp1> <fim_linha>;

// ATRIBUIÇÃO



// EXPRESSÕES
<exp1> ::= <exp2> | <exp2> E <exp1>;
<exp2> ::= <exp3> | <exp3> OU_BAB <exp2>;
<exp3> ::= <exp4> | <exp4> OU_EXCLUSIVO <exp3>;
<exp4> ::= <exp5> | <exp5> E_BAB <exp4>;
<exp5> ::= <exp6> | <exp6> <op_rel> <exp5>;
<exp6> ::= <exp7> | <exp7> <op_bitwise> <exp6>;
<exp7> ::= <exp8> | <exp8> <op_arit_baixa> <exp7>;
<exp8> ::= <exp9> | <exp9> <op_arit_alta> <exp8>;
<exp9> ::= <exp10> | <exp10> <op_adc> <exp9>; //bo ta aq
<exp10> ::= <exp11> | <op_neg> <exp10>;
<exp11> ::= INTEIRO | DECIMAL | CARACTERE | TEXTO | <id> | <id> <index> | PARENTESES_ABRE <ver_fim> PARENTESES_FECHA;

// Operadores
<op_rel> ::= MAIOR | MENOR | MAIOR_IGUAL | MENOR_IGUAL | IGUAL | DIFERENTE;
<op_adc> ::= PONTO;
<op_neg> ::= COMPLEMENTO | NAO;
<op_bitwise> ::= DESLOCAMENTO_ESQUERDA | DESLOCAMENTO_DIREITA;
<op_arit_baixa> ::= SOMA | SUBTRACAO;
<op_arit_alta> ::= MULTIPLICACAO | DIVISAO | RESTO;


<fim_linha> ::= PONTO_VIRGULA;